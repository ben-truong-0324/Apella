# Generated by Django 2.2.1 on 2019-06-02 04:49

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import users.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizations', '0001_initial'),
        ('topictag', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('active', models.BooleanField(default=True)),
                ('staff', models.BooleanField(default=False)),
                ('admin', models.BooleanField(default=False)),
                ('confirmed_email', models.BooleanField(default=False)),
                ('confirmed_email_time', models.DateTimeField(auto_now_add=True)),
                ('is_member', models.BooleanField(default=False)),
                ('is_decision_maker', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('active', models.BooleanField(default=False)),
                ('update', models.DateTimeField(auto_now=True)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserAvatar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(upload_to=users.models.upload_to)),
                ('update', models.DateTimeField(auto_now=True)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_image', models.ImageField(blank=True, default='', null=True, upload_to='')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Biography')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('location_city', models.CharField(blank=True, max_length=255, null=True, verbose_name='City living in')),
                ('location_state', models.CharField(blank=True, max_length=255, null=True, verbose_name='State living in')),
                ('location_country', models.CharField(blank=True, max_length=255, null=True, verbose_name='Country living in')),
                ('member_type', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'observer'), (1, 'member'), (2, 'decision maker'), (3, 'messenger'), (4, 'consultant')], default=0)),
                ('membership_validated', models.BooleanField(default=False)),
                ('member_badge', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'observer'), (2, 'active'), (3, 'informed and engaged')], default=1)),
                ('followers', models.ManyToManyField(blank=True, related_name='followers_profile', to='users.Profile')),
                ('following', models.ManyToManyField(blank=True, related_name='following_profile', to='users.Profile')),
                ('organization', models.ManyToManyField(blank=True, related_name='org_membership', to='organizations.Organization')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='topictag.TaggedObject', to='topictag.Tag', verbose_name='Tags')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
